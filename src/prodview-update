#!/usr/bin/python
"""TODO"""
import os
import time
import classad
from functions import parseArgs
from functions import dropObj
from functions import querySchedd
from functions import validateInt
from functions import getSchedds
from functions import rrdUpdate
from functions import createEmptyRRD

GSTARTUP = int(time.time())
def analyzeScheddOutput(ad, workflows, taskInfo):
    """
    Main function which gets all information from schedds
    and does some magic with adding this information to dictionary
    """
    jobs = querySchedd(ad, "WMAgent_RequestName isnt null && WMAgent_SubTaskName isnt null && JobPrio isnt null && DESIRED_Sites isnt null",
                       ["WMAgent_RequestName", "WMAgent_SubTaskName", "DESIRED_Sites", "MATCH_GLIDEIN_CMSSite",
                        "JobPrio", "JobStatus", "RequestMemory", "MaxWallTimeMins", "RequestCpus", "MemoryUsage", "'time()'", "EnteredCurrentStatus"])
    try:
        for job in jobs:
            request = job['WMAgent_RequestName']
            subTask = job['WMAgent_SubTaskName'].split("/")[-1]
            desiredSites = ""
            strDes = ""
            try:
                desiredSites = job['DESIRED_Sites'].split(",")
                strDes = job['DESIRED_Sites']
            except AttributeError:
                desiredSites = job['DESIRED_Sites'].eval()
                strDes = desiredSites
                desiredSites = desiredSites.split(",")
            desiredSites.sort()
            desiredSites = tuple(desiredSites)
            runningSite = job.get("MATCH_GLIDEIN_CMSSite")
            if job["JobStatus"] == 1:
                status = "MatchingIdle"
            elif job["JobStatus"] == 2:
                status = "Running"
            else:
                continue
            prio = job["JobPrio"]
            priorityDict = taskInfo.setdefault("Summary", {})
            scheddDict = priorityDict.setdefault("ScheddSummary", {})
            uniqueScheddDict = scheddDict.setdefault(ad['Name'], {"Running":0, "Idle":0, "CpusInUse": 0, "CpusPending":0, "workflows": set()})
            uniqueScheddDict['workflows'].add(request)
            prioPriorityDict = priorityDict.setdefault(int(prio), {"Running": 0, "Idle": 0, "CpusInUse": 0, "CpusPending": 0})
            requestDict = workflows.setdefault(request, {})
            subtaskDict = requestDict.setdefault(subTask, {})
            summaryDict = subtaskDict.setdefault('Summary', {})
            summaryInternal = summaryDict.setdefault("Internal", {})

            mainTaskInfo = taskInfo.setdefault(request, {})
            mainSubTask = mainTaskInfo.setdefault(subTask, {})
            memory = 0 if 'RequestMemory' not in job.keys() else validateInt(job['RequestMemory'])
            walltime = 0 if 'MaxWallTimeMins' not in job.keys() else validateInt(job['MaxWallTimeMins'])
            requestCpus = 0 if 'RequestCpus' not in job.keys() else validateInt(job['RequestCpus'])
            key = "||".join([str(memory), str(requestCpus), str(walltime), str(strDes), ad['Name']])
            # Times
            # 0 - x   < 30min    or       x < 250MB
            # 1 - 30  < x < 60  or 250  < x < 500
            # 2 - 60  < x < 120 or 500  < x < 1000
            # 3 - 120 < x < 240 or 1000 < x < 2000
            # 4 - 240 < x < 480 or 2000 < x < 4000
            # 5 - 480 < x < N   or 4000 < x < N
            timeRanges = [30, 60, 120, 240, 480]
            memoRanges = [250, 500, 1000, 2000, 4000]
            mainSubTaskdebug = mainSubTask.setdefault(key, {"Idle": 0, "Running": 0, "DesiredSites": '', 'WallTime': walltime, 'Memory': memory, 'Schedd': '', 'Cpus': requestCpus, 'CpusInUse': 0, 'CpusPending': 0, 
                                                            'JobsOverTime': [0,0,0,0,0,0], 'CpusInUseOverTime': [0,0,0,0,0,0], "JobsOverMemUse": [0,0,0,0,0,0], "CpusInUseOverMemUse": [0,0,0,0,0,0]})
            mainSubTaskdebug['Schedd'] = ad['Name']
            mainSubTaskdebug['Memory'] = memory
            mainSubTaskdebug['WallTime'] = walltime
            mainSubTaskdebug['Cpus'] = requestCpus
            mainSubTaskdebug['DesiredSites'] = strDes
            if job['JobStatus'] == 2:
                runTime = int(int(int(job['ServerTime']) - int(job['EnteredCurrentStatus']))/60)
                if walltime < runTime:
                    diffTime = runTime - walltime
                    # Lets calculate at which one to map it...
                    for i in range(0, 5):
                        if timeRanges[i] >= diffTime:
                            appendVal = 0
                            if i == 0:
                                appendVal = 0
                            else:
                                appendVal = i
                            mainSubTaskdebug['JobsOverTime'][appendVal] += 1
                            mainSubTaskdebug['CpusInUseOverTime'][appendVal] += requestCpus
                            break
                        elif i == 4:
                            mainSubTaskdebug['JobsOverTime'][5] += 1
                            mainSubTaskdebug['CpusInUseOverTime'][5] += requestCpus
                memoryUsage = 0 if 'MemoryUsage' not in job.keys() else validateInt(job['MemoryUsage'])
                if memory < memoryUsage:
                    diffMem = memoryUsage - memory
                    for i in range(0, 5):
                        if memoRanges[i] >= diffMem:
                            appendVal = 0
                            if i == 0:
                                appendVal = 0
                            else:
                                appendVal = i
                            mainSubTaskdebug['JobsOverMemUse'][appendVal] += 1
                            mainSubTaskdebug['CpusInUseOverMemUse'][appendVal] += requestCpus
                            break
                        elif i == 4:
                            mainSubTaskdebug['JobsOverMemUse'][5] += 1
                            mainSubTaskdebug['CpusInUseOverMemUse'][5] += requestCpus

                mainSubTaskdebug['Running'] += 1
                prioPriorityDict['Running'] += 1
                uniqueScheddDict['Running'] += 1
                mainSubTaskdebug['CpusInUse'] += requestCpus
                prioPriorityDict['CpusInUse'] += requestCpus
                uniqueScheddDict['CpusInUse'] += requestCpus
            elif job['JobStatus'] == 1:
                mainSubTaskdebug['Idle'] += 1
                prioPriorityDict['Idle'] += 1
                uniqueScheddDict['Idle'] += 1
                prioPriorityDict['CpusPending'] += requestCpus
                mainSubTaskdebug['CpusPending'] += requestCpus
                uniqueScheddDict['CpusPending'] += requestCpus
            jobinfo = (prio, desiredSites)
            if job["JobStatus"] == 1:
                summaryInternal.setdefault(jobinfo, 0)
                summaryInternal[jobinfo] += 1
            cpus = summaryDict.setdefault('CpusPending', 0)
            for site in desiredSites:
                tmpSite = 'EMPTY' if not site else site
                siteDict = subtaskDict.setdefault(tmpSite, {})
                prioDict = siteDict.setdefault(prio, {"Running": 0, "MatchingIdle": 0, "UniquePressure": 0, 'CpusInUse': 0, 'CpusPending': 0})
                prioDict.setdefault(status, 0)
                if job['JobStatus'] == 1:
                    prioDict[status] += 1
                    prioDict['CpusPending'] += requestCpus
                    if len(desiredSites) == 1:
                        prioDict['UniquePressure'] += 1
            if runningSite and job['JobStatus'] == 2:
                siteDict = subtaskDict.setdefault(runningSite, {})
                prioDict = siteDict.setdefault(prio, {"Running": 0, "MatchingIdle": 0, "UniquePressure": 0, 'CpusInUse': 0, 'CpusPending': 0})
                prioDict.setdefault(status, 0)
                prioDict[status] += 1
                prioDict['CpusInUse'] += requestCpus
            elif job['JobStatus'] == 2:
                # T[0-9]_[A-Z]{2,2}_[-_A-Za-z0-9]
                siteDict = subtaskDict.setdefault("T9_WM_UNDEFINED_MATCH_GLIDEIN_CMSSite", {})
                prioDict = siteDict.setdefault(prio, {"Running": 0, "MatchingIdle": 0, "UniquePressure": 0, 'CpusInUse': 0, 'CpusPending': 0})
                prioDict[status] += 1
                prioDict['CpusInUse'] += requestCpus
            else:
                summaryDict['CpusPending'] += requestCpus
    except RuntimeError as er:
        print 'Received Runtime error %s' % er
        return


def analyzePriosInner(workflows, sites, prio):
    """ Analyze priorities and this gives view of lower/higher running """
    # TODO: IMPROVE IT!!!!!
    # This analyze prios takes too much time to complete
    # when a lot of load is from production.
    # Need to take a look where to improve this.
    return 0, 0
#    higher_idle = 0
#    lower_running = 0
#    sites = set(sites)
#    if not sites:
#        return 0, 0
#    for request, request_dict in workflows.items():
#        for subtask, subtask_dict in request_dict.items():
#            for running_site, site_dict in subtask_dict.items():
#                if running_site == "Summary" and site_dict.get("Internal"):
#                    for jobinfo, jobs in site_dict["Internal"].items():
#                        idle_prio, desired_sites = jobinfo
#                        desired_sites = set(desired_sites)
#                        if (sites.intersection(desired_sites)) and idle_prio > prio:
#                            higher_idle += jobs
#                elif running_site in sites:
#                    for running_prio, prio_dict in site_dict.items():
#                        if running_prio >= prio:
#                            continue
#                        for status, count in prio_dict.items():
#                            if status != "Running":
#                                continue
#                            lower_running += count
#    return higher_idle, lower_running


def analyzePrios(workflows):
    """ Analyse priorities for workflows """
    for dummyrequest, requestDict in workflows.items():
        for dummysubtask, subtaskDict in requestDict.items():
            for site, siteDict in subtaskDict.items():
                if site == "Summary":
                    continue
                for dummyprio, prioDict in siteDict.items():
                    higherIdle, lowerRunning = 0, 0  # analyze_prios_inner(workflows, [site], prio)
                    prioDict["LowerPrioRunning"] = lowerRunning
                    prioDict["HigherPrioIdle"] = higherIdle

def getPrioName(mappings, prioToMap):
    """
    Get priority block according to given mapping
    If priority could not be found, default to Block7
    """
    for priority in sorted(mappings, reverse=True):
        if prioToMap >= priority:
            return mappings[priority]

    return "B7"

def summarize(workflows, gsites, tasks):
    """ Summarize running, idle, lower, higher run/idle, prios..."""
    sitePrioDict = {}
    mappings = {63000: "B6", 70000: "B5", 80000: "B4", 85000: "B3", 90000: "B2", 110000: "B1", 130000: "B0"}
    mappingsView = {"B7": "Low Priority", "B6": "Block 6 (63k)", "B5": "Block 5 (70k)", "B4": "Block 4 (80k)", "B3": "Block 3 (85k)", "B2": "Block 2 (90k)", "B1": "Block 1 (110k)", "B0": "High Priority"}
    for request, requestDict in workflows.items():
        for subtask, subtaskDict in requestDict.items():
            minPrio = min([min(siteDict.keys()) for siteDict in subtaskDict.values()])
            sites = subtaskDict.keys()
            taskinfo = tasks.get(request, {}).get(subtask, {})
            higherIdle, lowerRunning = analyzePriosInner(workflows, sites, minPrio)
            idle = sum(subtaskDict.get("Summary", {}).get("Internal", {}).values())
            running = 0
            uniq = 0
            cpususe = 0
            for siteDict in subtaskDict.values():
                for prioDict in siteDict.values():
                    if not isinstance(prioDict, dict):
                        break
                    running += prioDict.get("Running", 0)
                    uniq += prioDict.get("UniquePressure", 0)
                    cpususe += prioDict.get("CpusInUse", 0)
            cpuOverTime = [0, 0, 0, 0, 0, 0]
            jobOverTime = [0, 0, 0, 0, 0, 0]
            cpuOverMem = [0, 0, 0, 0, 0, 0]
            jobOverMem = [0, 0, 0, 0, 0, 0]
            for key, item in taskinfo.items():
                cpuOverTime = [x + y for x, y in zip(cpuOverTime, item['CpusInUseOverTime'])]
                jobOverTime = [x + y for x, y in zip(jobOverTime, item['JobsOverTime'])]
                cpuOverMem = [x + y for x, y in zip(cpuOverMem, item['CpusInUseOverMemUse'])]
                jobOverMem = [x + y for x, y in zip(jobOverMem, item['JobsOverMemUse'])]
            subtaskDict["Summary"].update({"BasePrio": minPrio, "Running": running, "Idle": idle,
                                           "HigherPrioIdle": higherIdle, "LowerPrioRunning": lowerRunning,
                                           "TaskInfo": taskinfo, "UniquePressure": uniq,
                                           "CpusInUse": cpususe, "CpusInUseOverTime": cpuOverTime,
                                           "JobsOverTime": jobOverTime, "CpusInUseOverMemUse": cpuOverMem,
                                           "JobsOverMemUse": jobOverMem})
            #if request == 'pdmvserv_task_TOP-RunIISummer15wmLHEGS-00148__v1_T_170213_140455_758':
            #    print request, subtask, subtaskDict["Summary"]

        minPrio = int(min([float(subtaskDict["Summary"]["BasePrio"]) for subtaskDict in requestDict.values()]))
        minPrio %= 10000000
        sites = set()
        for subtaskDict in requestDict.values():
            for site, siteDict in subtaskDict.items():
                if minPrio in siteDict:
                    sites.add(site)
        running = sum([subtaskDict["Summary"]["Running"] for subtaskDict in requestDict.values()])
        idle = sum([subtaskDict["Summary"]["Idle"] for subtaskDict in requestDict.values()])
        higherIdle, lowerRunning = analyzePriosInner(workflows, sites, minPrio)
        uniq = sum([subtaskDict["Summary"]["UniquePressure"] for subtaskDict in requestDict.values()])
        cpususe = sum([subtaskDict["Summary"]["CpusInUse"] for subtaskDict in requestDict.values()])
        cpuspen = sum([subtaskDict["Summary"]["CpusPending"] for subtaskDict in requestDict.values()])
        cpuOverTime =[0, 0, 0, 0, 0, 0]
        jobOverTime = [0, 0, 0, 0, 0, 0]
        cpuOverMem = [0, 0, 0, 0, 0, 0]
        jobOverMem = [0, 0, 0, 0, 0, 0]
        for subtaskDict in requestDict.values():
            cpuOverTime = [x + y for x, y in zip(cpuOverTime, subtaskDict["Summary"]["CpusInUseOverTime"])]
            jobOverTime = [x + y for x, y in zip(jobOverTime, subtaskDict["Summary"]["JobsOverTime"])]
            cpuOverMem = [x + y for x, y in zip(cpuOverMem, subtaskDict["Summary"]["CpusInUseOverMemUse"])]
            jobOverMem = [x + y for x, y in zip(jobOverMem, subtaskDict["Summary"]["JobsOverMemUse"])]
        print request, cpuOverTime, jobOverTime, cpuOverMem, jobOverMem
        requestDict["Summary"] = {"BasePrio": minPrio, "Running": running, "Idle": idle,
                                  "HigherPrioIdle": higherIdle, "LowerPrioRunning": lowerRunning,
                                  "UniquePressure": uniq, "CpusInUse": cpususe, "CpusPending": cpuspen,
                                  "CpusInUseOverTime": cpuOverTime, "JobsOverTime": jobOverTime, 
                                  "CpusInUseOverMemUse": cpuOverMem, "JobsOverMemUse": jobOverMem}

        requestSites = requestDict["Summary"].setdefault("Sites", {})

        for subtask, subtaskDict in requestDict.items():
            if subtask == "Summary":
                continue
            for site, siteDict in subtaskDict.items():
                if site == "Summary":
                    continue
                sitePrioDict.setdefault(site, {})
                requestSites.setdefault(site, {"Running": 0, "MatchingIdle": 0, "UniquePressure": 0, "CpusInUse": 0, "CpusPending": 0})
                for key in requestSites[site]:
                    name = None
                    for prio, prioDict in siteDict.items():
                        name = getPrioName(mappings, prio)
                        sitePrioDict[site].setdefault(name, {"Running": 0, "MatchingIdle": 0, "UniquePressure": 0, "CpusInUse": 0, "CpusPending": 0})
                        requestSites[site][key] += prioDict[key]
                        sitePrioDict[site][name][key] += prioDict[key]

        for site, siteDict in requestSites.items():
            gsitesDict = gsites.setdefault(site, {})
            gsitesDict.setdefault(request, {"Running": 0, "MatchingIdle": 0, "BasePrio": minPrio,
                                            'MatchingSites': len(requestSites), "UniquePressure": 0,
                                            "CpusInUse": 0, "CpusPending": 0})
            for status, dummycount in siteDict.items():
                gsitesDict[request][status] += siteDict[status]

    newTasksDict = {}
    for prio in tasks['Summary']:
        if prio == 'ScheddSummary':
            continue
        name = getPrioName(mappings, prio)
        newTasksDict.setdefault(name, {"Running": 0, "Idle": 0, "CpusInUse": 0, "CpusPending": 0})
        for key in tasks['Summary'][prio]:
            newTasksDict[name][key] += tasks['Summary'][prio][key]
    newTasksDict['Keys'] = mappingsView
    newTasksDict['Sites'] = sitePrioDict
    newTasksDict['ScheddSummary'] = tasks['Summary']['ScheddSummary']
    for scheddName in newTasksDict['ScheddSummary'].keys():
        newTasksDict['ScheddSummary'][scheddName]['workflows'] = list(newTasksDict['ScheddSummary'][scheddName]['workflows'])
    tasks['Summary'] = newTasksDict


def writeJson(workflows, gsites, output, taskInfo):
    """
    Write json output for monitoring
    """
    sites = {}
    running, idle, uniq, cpususe, cpuspen = 0, 0, 0, 0, 0
    for requestDict in workflows.values():
        for site, siteDict in requestDict["Summary"]["Sites"].items():
            sites.setdefault(site, {"Running": 0, "MatchingIdle": 0, "RequestCount": 0, "UniquePressure": 0, "CpusInUse": 0, "CpusPending": 0})
            sites[site]["Running"] += siteDict["Running"]
            sites[site]["MatchingIdle"] += siteDict["MatchingIdle"]
            sites[site]["RequestCount"] += 1
            sites[site]["UniquePressure"] += siteDict["UniquePressure"]
            sites[site]["CpusInUse"] += siteDict["CpusInUse"]
            sites[site]["CpusPending"] += siteDict["CpusPending"]
        running += requestDict["Summary"]["Running"]
        idle += requestDict["Summary"]["Idle"]
        uniq += requestDict["Summary"]["UniquePressure"]
        cpususe += requestDict["Summary"]["CpusInUse"]
        cpuspen += requestDict["Summary"]["CpusPending"]
    requests = len(workflows)

    now = int(time.time())
    dropObj(sites, output, "site_summary.json")
    tmpDict = dict(taskInfo['Summary'])
    map(tmpDict.pop, ['ScheddSummary'])
    dropObj({"Running": running, "Idle": idle, "CpusInUse": cpususe, "CpusPending": cpuspen, "RequestCount": requests, "UniquePressure": uniq, "Priorities": taskInfo['Summary'], "ScheddSummary": taskInfo['Summary']['ScheddSummary'], "UpdateTime": now}, output, "totals.json")
    for site, siteDict in gsites.items():
        siteDir = os.path.join(output, site)
        finalObj = dict(sites[site])
        finalObj["UpdateTime"] = now
        dropObj(finalObj, siteDir, "totals.json")
        dropObj(siteDict, siteDir, "summary.json")

    finalObj = {}
    for request, requestDict in workflows.items():
        finalObj[request] = dict(requestDict["Summary"])
        finalObj[request]["SiteCount"] = len(finalObj[request]["Sites"])
        del finalObj[request]["Sites"]
        requestSummary = dict(finalObj[request])
        requestSummary['UpdateTime'] = now
        requestSummary['SubtaskCount'] = len(requestDict)-1
        dropObj(requestSummary, os.path.join(output, request), "totals.json")
    dropObj(finalObj, output, "summary.json")

    for request, requestDict in workflows.items():
        finalObj = {}
        requestSites = {}
        for subtask, subtaskDict in requestDict.items():
            if subtask == "Summary":
                continue
            finalObj[subtask] = subtaskDict["Summary"]
            sites = subtaskDict.keys()
            sites.remove("Summary")
            # final_obj["SiteCount"] = len(sites)

            sites = {}
            for site, siteDict in subtaskDict.items():
                if site == "Summary":
                    continue
                sites[site] = {"Running":      sum(prioDict["Running"] for prioDict in siteDict.values()),
                               "MatchingIdle": sum(prioDict["MatchingIdle"] for prioDict in siteDict.values()),
                               "CpusInUse": sum(prioDict["CpusInUse"] for prioDict in siteDict.values()),
                               "CpusPending": sum(prioDict["CpusPending"] for prioDict in siteDict.values())}
            subtaskDir = os.path.join(output, request, subtask)
            dropObj(sites, subtaskDir, "site_summary.json")
            for site, siteDict in sites.items():
                requestSites.setdefault(site, {"Running": 0, "MatchingIdle": 0, "CpusInUse": 0, "CpusPending": 0})
                for status, count in siteDict.items():
                    requestSites[site][status] += count
            subtaskDict["Summary"]["SiteCount"] = len(sites)
            out = subtaskDict["Summary"]
            out["Internal"] = {}
            out["Sites"] = sites.keys()
            dropObj(out, subtaskDir, "summary.json")
        requestDir = os.path.join(output, request)
        dropObj(requestSites, requestDir, "site_summary.json")
        dropObj(finalObj, requestDir, "summary.json")


def writeRrds(workflows, gsites, output, taskInfo):
    """
    Create all rrds or update existing ones.
    """
    createEmptyRRD(output, GSTARTUP)
    sites = {}
    running, idle, uniq, cpususe, cpuspen = 0, 0, 0, 0, 0
    # Update for priorities graph.
    # This idealy shows in which status are more jobs (idle/running) compared to priority
    # ----------------------------------------------------------------
    for key in ['Running', 'Idle', 'CpusInUse', 'CpusPending']:
        fname = os.path.join(output, "priorities-%s.rrd" % key.lower())
        tempKeys = ["DS:R%s:GAUGE:360:U:U" % x for x in range(0, 8)]
        stats = tuple([taskInfo['Summary'][x][key] if x in taskInfo['Summary'] and key in taskInfo['Summary'][x] else 0 for x in sorted(taskInfo["Summary"]["Keys"])])
        tempUpdLine = (("%d:" % GSTARTUP) + ":".join(["%d"]*len(stats))) % stats
        rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)
    # ----------------------------------------------------------------
    # Site priorities graphs
    # ----------------------------------------------------------------
        tmpKey = 'MatchingIdle' if key == 'Idle' else key
        for site, siteDict in taskInfo['Summary']['Sites'].items():
            fname = os.path.join(output, "priorities-%s-%s.rrd" % (site.lower(), key.lower()))
            tempKeys = ["DS:R%s:GAUGE:360:U:U" % x for x in range(0, 8)]
            stats = tuple([siteDict[x][tmpKey] if x in siteDict and tmpKey in siteDict[x] else 0 for x in sorted(taskInfo["Summary"]["Keys"])])
            tempUpdLine = (("%d:" % GSTARTUP) + ":".join(["%d"]*len(stats))) % stats
            print tempUpdLine, site, key, tmpKey
            rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)
    # -----------------------------------------------------------------

    for requestDict in workflows.values():
        for site, siteDict in requestDict["Summary"]["Sites"].items():
            sites.setdefault(site, {"Running": 0, "MatchingIdle": 0, "UniquePressure": 0, "CpusInUse": 0, "CpusPending": 0})
            sites[site]["Running"] += siteDict["Running"]
            sites[site]["MatchingIdle"] += siteDict["MatchingIdle"]
            sites[site]["UniquePressure"] += siteDict["UniquePressure"]
            sites[site]["CpusInUse"] += siteDict["CpusInUse"]
            sites[site]["CpusPending"] += siteDict["CpusPending"]
        running += requestDict["Summary"]["Running"]
        idle += requestDict["Summary"]["Idle"]
        uniq += requestDict["Summary"]["UniquePressure"]
        cpususe += requestDict["Summary"]["CpusInUse"]
        cpuspen += requestDict["Summary"]["CpusPending"]
    fname = os.path.join(output, "summary.rrd")
    tempKeys = ["DS:Running:GAUGE:360:U:U", "DS:Idle:GAUGE:360:U:U", "DS:UniquePressure:GAUGE:360:U:U", "DS:CpusUse:GAUGE:360:U:U", "DS:CpusPen:GAUGE:360:U:U"]
    tempUpdLine = "%d:%d:%d:%d:%d:%d" % (GSTARTUP, running, idle, uniq, cpususe, cpuspen)
    rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)

    for site, siteDict in sites.items():
        fname = os.path.join(output, "%s.rrd" % site)
        tempKeys = ["DS:Running:GAUGE:360:U:U", "DS:MatchingIdle:GAUGE:360:U:U", "DS:CpusUse:GAUGE:360:U:U", "DS:CpusPen:GAUGE:360:U:U"]
        tempUpdLine = "%d:%d:%d:%d:%d" % (GSTARTUP, siteDict["Running"], siteDict["MatchingIdle"], siteDict["CpusInUse"], siteDict["CpusPending"])
        rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)

    for site, siteDict in gsites.items():
        siteDir = os.path.join(output, site)
        for request, requestDict in siteDict.items():
            fname = os.path.join(siteDir, "%s.rrd" % request)
            tempKeys = ["DS:Running:GAUGE:360:U:U", "DS:MatchingIdle:GAUGE:360:U:U", "DS:CpusUse:GAUGE:360:U:U", "DS:CpusPen:GAUGE:360:U:U"]
            tempUpdLine = "%d:%d:%d:%d:%d" % (GSTARTUP, requestDict["Running"], requestDict["MatchingIdle"], requestDict["CpusInUse"], requestDict["CpusPending"])
            rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)

    totalsOver = [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]
    tempTimeKeys = []
    tempMemKeys = []
    for key in [['CpusInUseOverTime', 'CpusInUseOverMem'], ['NJobsOverTime', 'NJobsUseOverMem']]:
        for i in range(0, 6):
            tempTimeKeys.append("DS:%s%s:GAUGE:360:U:U" % (key[0], str(i)))
            tempMemKeys.append("DS:%s%s:GAUGE:360:U:U" % (key[1], str(i)))
    print tempTimeKeys, tempMemKeys
    for request, requestDict in workflows.items():
        requestDir = os.path.join(output, request)
        fname = os.path.join(requestDir, "request.rrd")
        tempKeys = ["DS:Running:GAUGE:360:U:U", "DS:Idle:GAUGE:360:U:U", "DS:HigherPrioIdle:GAUGE:360:U:U", "DS:LowerPrioRunning:GAUGE:360:U:U", "DS:CpusUse:GAUGE:360:U:U", "DS:CpusPen:GAUGE:360:U:U"]
        stats = requestDict["Summary"]["Running"], requestDict["Summary"]["Idle"], \
            requestDict["Summary"]["HigherPrioIdle"], requestDict["Summary"]["LowerPrioRunning"], \
            requestDict["Summary"]["CpusInUse"], requestDict["Summary"]["CpusPending"]
        tempUpdLine = (("%d:" % GSTARTUP) + ":".join(["%d"]*len(stats))) % stats
        rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)
        ## OverMem OverCpu
        totalsOver[0] = [x + y for x, y in zip(totalsOver[0], requestDict['Summary']['CpusInUseOverTime'])]
        totalsOver[1] = [x + y for x, y in zip(totalsOver[1], requestDict['Summary']['JobsOverTime'])]
        totalsOver[2] = [x + y for x, y in zip(totalsOver[2], requestDict['Summary']['CpusInUseOverMemUse'])]
        totalsOver[3] = [x + y for x, y in zip(totalsOver[3], requestDict['Summary']['JobsOverMemUse'])]

        # Over Time Usage
        mergedList = requestDict['Summary']['CpusInUseOverTime'] + requestDict['Summary']['JobsOverTime']
        tempUpdLine = (("%d:" % GSTARTUP) + ":".join(["%d"]*len(mergedList))) % tuple(mergedList)
        rrdUpdate(os.path.join(requestDir, "overUseTime.rrd"), tempTimeKeys, tempUpdLine, GSTARTUP)
        # Over memory usage
        mergedList = requestDict['Summary']['CpusInUseOverMemUse'] + requestDict['Summary']['JobsOverMemUse']
        tempUpdLine = (("%d:" % GSTARTUP) + ":".join(["%d"]*len(mergedList))) % tuple(mergedList)
        rrdUpdate(os.path.join(requestDir, "overUseMem.rrd"), tempMemKeys, tempUpdLine, GSTARTUP)

        for site, siteDict in requestDict["Summary"]["Sites"].items():
            fname = os.path.join(requestDir, "%s.rrd" % site)
            tempKeys = ["DS:Running:GAUGE:360:U:U", "DS:MatchingIdle:GAUGE:360:U:U", "DS:CpusUse:GAUGE:360:U:U", "DS:CpusPen:GAUGE:360:U:U"]
            tempUpdLine = "%d:%d:%d:%d:%d" % (GSTARTUP, siteDict["Running"], siteDict["MatchingIdle"], siteDict["CpusInUse"], siteDict["CpusPending"])
            rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)

        for subtask, subtaskDict in requestDict.items():
            if subtask == "Summary":
                continue
            subtaskDir = os.path.join(requestDir, subtask)
            fname = os.path.join(subtaskDir, "subtask.rrd")
            tempKeys = ["DS:Running:GAUGE:360:U:U", "DS:Idle:GAUGE:360:U:U", "DS:HigherPrioIdle:GAUGE:360:U:U", "DS:LowerPrioRunning:GAUGE:360:U:U", "DS:CpusUse:GAUGE:360:U:U", "DS:CpusPen:GAUGE:360:U:U"]
            stats = subtaskDict["Summary"]["Running"], subtaskDict["Summary"]["Idle"], \
                subtaskDict["Summary"]["HigherPrioIdle"], subtaskDict["Summary"]["LowerPrioRunning"], \
                subtaskDict["Summary"]["CpusInUse"], subtaskDict["Summary"]["CpusPending"]
            tempUpdLine = (("%d:" % GSTARTUP) + ":".join(["%d"]*len(stats))) % stats
            rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)
            ## Over Time use for subtask
            mergedList = subtaskDict['Summary']['CpusInUseOverTime'] + subtaskDict['Summary']['JobsOverTime']
            tempUpdLine = (("%d:" % GSTARTUP) + ":".join(["%d"]*len(mergedList))) % tuple(mergedList)
            rrdUpdate(os.path.join(subtaskDir, "overUseTime.rrd"), tempTimeKeys, tempUpdLine, GSTARTUP)
            # Over MemUse for subtask
            #mergedList = subtaskDict['Summary']['CpusInUseOverMemUse'] + subtaskDict['Summary']['JobsOverMemUse']
            #tempUpdLine = (("%d:" % GSTARTUP) + ":".join(["%d"]*len(mergedList))) % tuple(mergedList)
            #rrdUpdate(os.path.join(subtaskDir, "overUseMem.rrd"), tempMemKeys, tempUpdLine, GSTARTUP)

            for site, siteDict in subtaskDict.items():
                if site == "Summary":
                    continue
                fname = os.path.join(subtaskDir, "%s.rrd" % site)
                tempKeys = ["DS:Running:GAUGE:360:U:U", "DS:MatchingIdle:GAUGE:360:U:U", "DS:HigherPrioIdle:GAUGE:360:U:U", "DS:LowerPrioRunning:GAUGE:360:U:U", "DS:CpusUse:GAUGE:360:U:U", "DS:CpusPen:GAUGE:360:U:U"]
                stats = sum(prioDict["Running"] for prioDict in siteDict.values()), \
                    sum(prioDict["MatchingIdle"] for prioDict in siteDict.values()), \
                    sum(prioDict["HigherPrioIdle"] for prioDict in siteDict.values()), \
                    sum(prioDict["LowerPrioRunning"] for prioDict in siteDict.values()), \
                    sum(prioDict["CpusInUse"] for prioDict in siteDict.values()), \
                    sum(prioDict["CpusPending"] for prioDict in siteDict.values())
                tempUpdLine = (("%d:" % GSTARTUP) + ":".join(["%d"]*len(stats))) % stats
                rrdUpdate(fname, tempKeys, tempUpdLine, GSTARTUP)
        print totalsOver
    # Over Time
    mergedList = totalsOver[0] + totalsOver[1]
    tempUpdLine = (("%d:" % GSTARTUP) + ":".join(["%d"]*len(mergedList))) % tuple(mergedList)
    rrdUpdate(os.path.join(output, "overUseTime.rrd"), tempTimeKeys, tempUpdLine, GSTARTUP)
    # Over Mem
    mergedList = totalsOver[2] + totalsOver[3]
    tempUpdLine = (("%d:" % GSTARTUP) + ":".join(["%d"]*len(mergedList))) % tuple(mergedList)
    rrdUpdate(os.path.join(output, "overUseMem.rrd"), tempMemKeys, tempUpdLine, GSTARTUP)

def main():
    """ Main prodview function """
    opts, dummyargs = parseArgs()
    scheddAds, dummycoll = getSchedds(opts, opts.pool, 'CMSGWMS_Type=?="prodschedd" || CMSGWMS_Type=?="tier0schedd"', ['Name', 'MyAddress', 'ScheddIpAddr'])

    sites = {}
    workflows = {}
    taskInfo = {}
    allSchedds = []
    for ad in scheddAds:
        allSchedds.append(ad['Name'])
        try:
            print 'Querying scheduler:', ad['Name']
            analyzeScheddOutput(ad, workflows, taskInfo)
        except IOError:
            print 'Failed, Continue'
    scheddAds, dummycoll = getSchedds(opts, opts.pool, 'CMSGWMS_Type=?="prodschedd" || CMSGWMS_Type=?="tier0schedd"', ['Name', 'MyAddress', 'ScheddIpAddr'], split = True)
    for ad in scheddAds:
        if ad["Name"] in allSchedds:
            continue
        try:
            print 'Querying scheduler which is registered only in main collector:', ad['Name']
            analyzeScheddOutput(ad, workflows, taskInfo)
        except IOError:
            print 'Failed, Continue'
    analyzePrios(workflows)
    summarize(workflows, sites, taskInfo)

    if opts.prodview:
        writeJson(workflows, sites, opts.prodview, taskInfo)
        writeRrds(workflows, sites, opts.prodview, taskInfo)
    print GSTARTUP, int(time.time()), int(time.time())-GSTARTUP

if __name__ == "__main__":
    main()
